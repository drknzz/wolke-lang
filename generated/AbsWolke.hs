

module AbsWolke where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program a = Program a [Def a]
  deriving (Eq, Ord, Show, Read)

instance Functor Program where
    fmap f x = case x of
        Program a defs -> Program (f a) (map (fmap f) defs)
data Def a
    = FunDef a Ident [Arg a] (Type a) (Block a)
    | VarDef a (Type a) Ident (Expr a)
  deriving (Eq, Ord, Show, Read)

instance Functor Def where
    fmap f x = case x of
        FunDef a ident args type_ block -> FunDef (f a) ident (map (fmap f) args) (fmap f type_) (fmap f block)
        VarDef a type_ ident expr -> VarDef (f a) (fmap f type_) ident (fmap f expr)
data Arg a = Arg a (Type a) Ident | ArgRef a (Type a) Ident
  deriving (Eq, Ord, Show, Read)

instance Functor Arg where
    fmap f x = case x of
        Arg a type_ ident -> Arg (f a) (fmap f type_) ident
        ArgRef a type_ ident -> ArgRef (f a) (fmap f type_) ident
data Block a = SBlock a [Stmt a]
  deriving (Eq, Ord, Show, Read)

instance Functor Block where
    fmap f x = case x of
        SBlock a stmts -> SBlock (f a) (map (fmap f) stmts)
data Stmt a
    = Empty a
    | BStmt a (Block a)
    | SDef a (Def a)
    | Ass a Ident (Expr a)
    | Ret a (Expr a)
    | VRet a
    | Cond a (Expr a) (Block a)
    | CondElse a (Expr a) (Block a) (Block a)
    | While a (Expr a) (Block a)
    | SExp a (Expr a)
    | Break a
    | Continue a
    | Print a (Expr a)
  deriving (Eq, Ord, Show, Read)

instance Functor Stmt where
    fmap f x = case x of
        Empty a -> Empty (f a)
        BStmt a block -> BStmt (f a) (fmap f block)
        SDef a def -> SDef (f a) (fmap f def)
        Ass a ident expr -> Ass (f a) ident (fmap f expr)
        Ret a expr -> Ret (f a) (fmap f expr)
        VRet a -> VRet (f a)
        Cond a expr block -> Cond (f a) (fmap f expr) (fmap f block)
        CondElse a expr block1 block2 -> CondElse (f a) (fmap f expr) (fmap f block1) (fmap f block2)
        While a expr block -> While (f a) (fmap f expr) (fmap f block)
        SExp a expr -> SExp (f a) (fmap f expr)
        Break a -> Break (f a)
        Continue a -> Continue (f a)
        Print a expr -> Print (f a) (fmap f expr)
data Type a
    = Int a | Str a | Bool a | Void a | Fun a [Type a] (Type a)
  deriving (Eq, Ord, Show, Read)

instance Functor Type where
    fmap f x = case x of
        Int a -> Int (f a)
        Str a -> Str (f a)
        Bool a -> Bool (f a)
        Void a -> Void (f a)
        Fun a types type_ -> Fun (f a) (map (fmap f) types) (fmap f type_)
data Expr a
    = EVar a Ident
    | ELitInt a Integer
    | ELitTrue a
    | ELitFalse a
    | EApp a Ident [Expr a]
    | EString a String
    | Neg a (Expr a)
    | Not a (Expr a)
    | EMul a (Expr a) (MulOp a) (Expr a)
    | EAdd a (Expr a) (AddOp a) (Expr a)
    | ERel a (Expr a) (RelOp a) (Expr a)
    | EAnd a (Expr a) (Expr a)
    | EOr a (Expr a) (Expr a)
  deriving (Eq, Ord, Show, Read)

instance Functor Expr where
    fmap f x = case x of
        EVar a ident -> EVar (f a) ident
        ELitInt a integer -> ELitInt (f a) integer
        ELitTrue a -> ELitTrue (f a)
        ELitFalse a -> ELitFalse (f a)
        EApp a ident exprs -> EApp (f a) ident (map (fmap f) exprs)
        EString a string -> EString (f a) string
        Neg a expr -> Neg (f a) (fmap f expr)
        Not a expr -> Not (f a) (fmap f expr)
        EMul a expr1 mulop expr2 -> EMul (f a) (fmap f expr1) (fmap f mulop) (fmap f expr2)
        EAdd a expr1 addop expr2 -> EAdd (f a) (fmap f expr1) (fmap f addop) (fmap f expr2)
        ERel a expr1 relop expr2 -> ERel (f a) (fmap f expr1) (fmap f relop) (fmap f expr2)
        EAnd a expr1 expr2 -> EAnd (f a) (fmap f expr1) (fmap f expr2)
        EOr a expr1 expr2 -> EOr (f a) (fmap f expr1) (fmap f expr2)
data AddOp a = Plus a | Minus a
  deriving (Eq, Ord, Show, Read)

instance Functor AddOp where
    fmap f x = case x of
        Plus a -> Plus (f a)
        Minus a -> Minus (f a)
data MulOp a = Times a | Div a | Mod a
  deriving (Eq, Ord, Show, Read)

instance Functor MulOp where
    fmap f x = case x of
        Times a -> Times (f a)
        Div a -> Div (f a)
        Mod a -> Mod (f a)
data RelOp a = LTH a | LE a | GTH a | GE a | EQU a | NE a
  deriving (Eq, Ord, Show, Read)

instance Functor RelOp where
    fmap f x = case x of
        LTH a -> LTH (f a)
        LE a -> LE (f a)
        GTH a -> GTH (f a)
        GE a -> GE (f a)
        EQU a -> EQU (f a)
        NE a -> NE (f a)
