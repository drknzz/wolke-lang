module SkelWolke where

-- Haskell module generated by the BNF converter

import AbsWolke
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Show a => Program a -> Result
transProgram x = case x of
  Program _ defs -> failure x
transDef :: Show a => Def a -> Result
transDef x = case x of
  FunDef _ ident args type_ block -> failure x
  VarDef _ type_ ident expr -> failure x
transArg :: Show a => Arg a -> Result
transArg x = case x of
  Arg _ type_ ident -> failure x
  ArgRef _ type_ ident -> failure x
transBlock :: Show a => Block a -> Result
transBlock x = case x of
  SBlock _ stmts -> failure x
transStmt :: Show a => Stmt a -> Result
transStmt x = case x of
  Empty _ -> failure x
  BStmt _ block -> failure x
  SDef _ def -> failure x
  Ass _ ident expr -> failure x
  Ret _ expr -> failure x
  VRet _ -> failure x
  Cond _ expr block -> failure x
  CondElse _ expr block1 block2 -> failure x
  While _ expr block -> failure x
  SExp _ expr -> failure x
  Break _ -> failure x
  Continue _ -> failure x
  Print _ expr -> failure x
transType :: Show a => Type a -> Result
transType x = case x of
  Int _ -> failure x
  Str _ -> failure x
  Bool _ -> failure x
  Void _ -> failure x
  Fun _ types type_ -> failure x
transExpr :: Show a => Expr a -> Result
transExpr x = case x of
  EVar _ ident -> failure x
  ELitInt _ integer -> failure x
  ELitTrue _ -> failure x
  ELitFalse _ -> failure x
  EApp _ ident exprs -> failure x
  EString _ string -> failure x
  Neg _ expr -> failure x
  Not _ expr -> failure x
  EMul _ expr1 mulop expr2 -> failure x
  EAdd _ expr1 addop expr2 -> failure x
  ERel _ expr1 relop expr2 -> failure x
  EAnd _ expr1 expr2 -> failure x
  EOr _ expr1 expr2 -> failure x
transAddOp :: Show a => AddOp a -> Result
transAddOp x = case x of
  Plus _ -> failure x
  Minus _ -> failure x
transMulOp :: Show a => MulOp a -> Result
transMulOp x = case x of
  Times _ -> failure x
  Div _ -> failure x
  Mod _ -> failure x
transRelOp :: Show a => RelOp a -> Result
transRelOp x = case x of
  LTH _ -> failure x
  LE _ -> failure x
  GTH _ -> failure x
  GE _ -> failure x
  EQU _ -> failure x
  NE _ -> failure x

